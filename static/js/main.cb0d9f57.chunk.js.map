{"version":3,"sources":["components/portfolio.js","components/collection.js","components/aboutme.js","components/contactme.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Portfolio","className","Component","Collection","AboutMe","ContactMe","Main","exact","path","component","About","Contact","App","style","height","position","background","transparent","title","color","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAYeA,E,uKARX,OACE,yBAAKC,UAAU,aACb,0D,GAJgBC,aCUTC,EAVf,uKAEI,OACE,6BACE,+CAJR,GAAgCD,aCUjBE,EAVf,uKAEI,OACE,6BACE,0CAJR,GAA6BF,aCUdG,EAVf,uKAEI,OACE,6BACE,8CAJR,GAA+BH,aCchBI,EATF,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,UAAWT,IACjD,kBAAC,IAAD,CAAOQ,KAAK,+BAA+BC,UAAWN,IACtD,kBAAC,IAAD,CAAOK,KAAK,4BAA4BC,UAAWC,IACnD,kBAAC,IAAD,CAAOF,KAAK,8BAA8BC,UAAWE,M,OCmC1CC,E,uKArCX,OACE,yBAAKX,UAAU,OACb,yBAAKY,MAAO,CAAEC,OAAQ,QAASC,SAAU,aACvC,kBAAC,SAAD,CACEF,MAAO,CACLG,WACE,gHAGJ,kBAAC,SAAD,CAAQC,aAAW,EAACC,MAAM,SAASL,MAAO,CAAEM,MAAO,UACjD,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,cAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,eAAT,cACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,gBAGJ,kBAAC,SAAD,CAAQF,MAAM,SACZ,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAME,GAAG,cAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,eAAT,cACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,gBAIJ,kBAAC,UAAD,KACE,yBAAKnB,UAAU,iBACf,kBAAC,EAAD,c,GA9BIC,aCIEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCPNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cb0d9f57.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Portfolio extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h2>Photography By Morgan</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Portfolio;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Collection extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Collection</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Collection;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class AboutMe extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>About</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AboutMe;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class ContactMe extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Lets Talk</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactMe;\r\n","import React from \"react\";\r\n\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Portfolio from \"./portfolio\";\r\nimport Collection from \"./collection\";\r\nimport About from \"./aboutme\";\r\nimport Contact from \"./contactme\";\r\nconst Main = () => (\r\n  <Switch>\r\n    <Route exact path=\"/Morgan-Portfolio\" component={Portfolio} />\r\n    <Route path=\"/Morgan-Portfolio/collection\" component={Collection} />\r\n    <Route path=\"/Morgan-Portfolio/aboutme\" component={About} />\r\n    <Route path=\"/Morgan-Portfolio/contactme\" component={Contact} />\r\n  </Switch>\r\n);\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Layout, Header, Navigation, Drawer, Content } from \"react-mdl\";\n\nimport Main from \"./components/main\";\n\nimport { Link } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={{ height: \"100vh\", position: \"relative\" }}>\n          <Layout\n            style={{\n              background:\n                \"url(https://images.wallpaperscraft.com/image/camera_photographer_smoke_126548_1280x1024.jpg) center / cover\",\n            }}\n          >\n            <Header transparent title=\"Morgan\" style={{ color: \"white\" }}>\n              <Navigation>\n                <Link to=\"/portfolio\">Portfolio</Link>\n                <Link to=\"/collection\">Collection</Link>\n                <Link to=\"/aboutme\">About Me</Link>\n                <Link to=\"/contactme\">Contact Me</Link>\n              </Navigation>\n            </Header>\n            <Drawer title=\"Title\">\n              <Navigation>\n                <Link to=\"/portfolio\">Portfolio</Link>\n                <Link to=\"/collection\">Collection</Link>\n                <Link to=\"/aboutme\">About Me</Link>\n                <Link to=\"/contactme\">Contact Me</Link>\n              </Navigation>\n            </Drawer>\n\n            <Content>\n              <div className=\"page-content\" />\n              <Main />\n            </Content>\n          </Layout>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"react-mdl/extra/material.css\";\nimport \"react-mdl/extra/material.js\";\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}